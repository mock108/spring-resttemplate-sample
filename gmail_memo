
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.mail.internet.MimeMessage;

import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeTokenRequest;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.GmailScopes;
import com.google.api.services.gmail.model.ListMessagesResponse;
import com.google.api.services.gmail.model.Message;
import com.google.api.services.gmail.model.MessagePartHeader;
import com.google.auth.http.HttpCredentialsAdapter;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.auth.oauth2.ServiceAccountCredentials;

@Service
@Transactional(rollbackFor = Exception.class)
public class TestGoogleService {
	public static final Logger logger = LoggerFactory.getLogger(TestGoogleService.class);
	private static final String USER = "me";
	private static final String CLIENT_SECRET_FILE = Paths.get("src/main/resources/").toString();
	private static final String DATA_STORE_DIR = Paths.get("src/main/resources/").toString();
	private static final String CREDENTIALS_FILE = Paths.get("src/main/resources/").toString();
	private static final String CLIENT_SECRET = "";
	private static final String CLIENT_ID = "";
	private static final String APPLICATION_NAME = "";
	private static final String REDIRECT_URI = "";
	private static final Set<String> SCOPE = Stream.of(
			GmailScopes.GMAIL_READONLY,
			GmailScopes.GMAIL_SEND).collect(Collectors.toSet());

	private static GoogleAuthorizationCodeFlow flow;

	@Autowired
	public TestGoogleService() {
		try {
			createFrowInstance();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String getAuthUrl() throws Exception {
		return flow.newAuthorizationUrl()
				.setAccessType("offline")
				.setApprovalPrompt("force")
				.setRedirectUri(REDIRECT_URI)
				.build();
	}

	public Credential auth(final String code) throws Exception {
		JacksonFactory jsonFactory = JacksonFactory.getDefaultInstance();
		NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
		GoogleTokenResponse token = new GoogleAuthorizationCodeTokenRequest(
				httpTransport, jsonFactory, CLIENT_ID, CLIENT_SECRET, code, REDIRECT_URI).execute();
		return flow.createAndStoreCredential(token, "userId");
	}

	public List<String> receiveMessage() throws Exception {
		final Gmail gmail = getGmailService();

		List<Message> messageList = getMessageList(gmail, USER);
		List<String> messageSnippetList = new ArrayList<>();
		for (Message message : messageList) {
			List<MessagePartHeader> resHeaders = getMessage(gmail, USER, message.getId()).getPayload().getHeaders();
			for (MessagePartHeader header : resHeaders) {
				if (header.getName().equals("Subject"))
					messageSnippetList.add(header.getValue());
			}
		}
		return messageSnippetList;
	}

	public List<String> receiveApplicationMessage() throws Exception {
		final Gmail gmail = getServiceAccountGmailService();

		List<Message> messageList = getMessageList(gmail, USER);
		List<String> messageSnippetList = new ArrayList<>();
		for (Message message : messageList) {
			List<MessagePartHeader> resHeaders = getMessage(gmail, USER, message.getId()).getPayload().getHeaders();
			for (MessagePartHeader header : resHeaders) {
				if (header.getName().equals("Subject"))
					messageSnippetList.add(header.getValue());
			}
		}
		return messageSnippetList;
	}

	public void sendMessage(MimeMessage mimeMessage) throws Exception {
		final Gmail gmail = getGmailService();
		Message message = createMessageWithEmail(mimeMessage);
		gmail.users().messages().send(USER, message).execute();
	}

	public void sendApplicationMessage(MimeMessage mimeMessage) throws Exception {
		final Gmail gmail = getServiceAccountGmailService();
		Message message = createMessageWithEmail(mimeMessage);
		message = gmail.users().messages().send(USER, message).execute();
	}

	private static void createFrowInstance() throws Exception {
		if (flow != null) {
			return;
		}
		JacksonFactory jsonFactory = JacksonFactory.getDefaultInstance();
		NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
		final InputStreamReader reader = new InputStreamReader(new FileInputStream(new File(CLIENT_SECRET_FILE)));
		final GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(jsonFactory, reader);
		flow = new GoogleAuthorizationCodeFlow.Builder(
				httpTransport, jsonFactory, clientSecrets, SCOPE)
						.setDataStoreFactory(new FileDataStoreFactory(new File(DATA_STORE_DIR)))
						.build();
	}

	private static Gmail getGmailService() throws Exception {
		JacksonFactory jsonFactory = JacksonFactory.getDefaultInstance();
		NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
		Credential Credential = flow.loadCredential("userId");
		return new Gmail.Builder(httpTransport, jsonFactory, Credential)
				.setApplicationName(APPLICATION_NAME)
				.build();
	}

	private static Gmail getServiceAccountGmailService() throws Exception {
		Set<String> scope = Stream.of(GmailScopes.MAIL_GOOGLE_COM).collect(Collectors.toSet());
		FileInputStream serviceAccountStream = new FileInputStream(new File(CREDENTIALS_FILE));
		GoogleCredentials credentials = ServiceAccountCredentials
				.fromStream(serviceAccountStream)
				.createScoped(scope)
				.createDelegated(CREDENTIALS_DELEGATED);

		NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
		JacksonFactory jsonFactory = JacksonFactory.getDefaultInstance();
		HttpRequestInitializer HttpRequestInitializer = request -> {
			new HttpCredentialsAdapter(credentials).initialize(request);
			request.setConnectTimeout(60000);
			request.setReadTimeout(60000);
		};
		return new Gmail.Builder(httpTransport, jsonFactory, HttpRequestInitializer)
				.setApplicationName(APPLICATION_NAME)
				.build();
	}

	private static Message createMessageWithEmail(MimeMessage email) throws Exception {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		email.writeTo(baos);
		String encodedEmail = Base64.encodeBase64URLSafeString(baos.toByteArray());
		Message message = new Message();
		message.setRaw(encodedEmail);
		return message;
	}

	private List<Message> getMessageList(Gmail gmailService, String user) throws Exception {
		ListMessagesResponse messagesResponse = gmailService.users().messages().list(user).execute();
		return messagesResponse.getMessages();
	}

	private Message getMessage(Gmail gmailService, String user, String messageId) throws Exception {
		Message message = gmailService.users().messages().get(user, messageId).execute();
		return message;
	}

}
